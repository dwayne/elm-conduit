#!/usr/bin/env bash

#
# Usage: [simulate=0*|1] deploy-production
#

set -euo pipefail

simulate="${simulate:-0}"

if [[ "$simulate" != 0 ]]; then
  echo "ATTENTION!!! This is only a simulation."
  set -x
fi


# CHECK BRANCH


current_branch="$(git branch --show-current)"
if [[ "$current_branch" != master ]]; then
  echo "You are currently on the branch: $current_branch"
  #
  # NOTE:
  #
  # Usually you'd want to deploy from the master branch. On rare
  # occassions you'd deploy from another branch. So deploying
  # from a different branch could be a mistake and that's why we
  # verify if you want to continue with the deploy.
  #
  read -r -n 1 -t 30 -p "Are you sure want to continue? (y/N) "
  case $REPLY in
    y | Y )
      echo
      ;;

    * )
      exit 1
  esac
fi


# BUILD


build-production


# PREPARE DEPLOY DIRECTORY


out="$(mktemp -d -t deploy-XXXXX)"
echo "Prepared the deploy directory: $out"


# PREPARE WORKTREE


branch_name="production"

if [[ "$simulate" = 0 ]]; then
  git worktree add "$out" "$branch_name"
  git -C "$out" pull
fi


# DEPLOY


src="${build:?}/application"
hash="$(git log -n 1 --format='%h' "$current_branch")"
message="Site updated to commit $hash from the $current_branch branch"

cp -r "$src/"* "$out"

if [[ "$simulate" != 0 ]]; then
  echo "$message"
else
  if git -C "$out" diff --quiet; then
    echo "No changes detected."
  else
    git -C "$out" add .
    git -C "$out" commit -m "$message"
    git -C "$out" push -u origin HEAD
  fi
fi


# CLEAN UP


if [[ "$simulate" != 0 ]]; then
  echo "Please run \"rm -rf $out\" when you're done"
else
  git worktree remove --force "$out"
  rm -rf "$out"

  echo "Success!"
fi
